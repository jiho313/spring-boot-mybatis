<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.co.jhta.mapper.ProductMapper">

	<update id="insertProduct" parameterType="Product">
	
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			select web_products_seq.nextval
			from dual
		</selectKey>
		insert into web_products
		(product_no, product_name, product_maker, product_description, product_price, product_discount_price,
		 product_stock, cat_no)
		 values
		(#{no}, #{name}, #{maker}, #{description}, #{price}, #{discountPrice}, #{stock}, #{catNo})
	</update>
	
	<resultMap type="Product" id="ProductResultMap">
		<id column="product_no" property="no"/>
		<result column="product_name" property="name"/>
		<result column="product_maker" property="maker"/>
		<result column="product_description" property="description"/>
		<result column="product_price" property="price"/>
		<result column="product_discount_price" property="discountPrice"/>
		<result column="product_on_sell" property="onSell"/>
		<result column="product_stock" property="stock"/>
		<result column="product_update_date" property="updateDate"/>
		<result column="product_create_date" property="createDate"/>
		<result column="cat_no" property="catNo"/>
		<result column="cat_name" property="catName"/>
	</resultMap>
	
	<select id="getAllProducts" resultMap="ProductResultMap">
		select product_no, product_name, product_maker, product_price, product_discount_price, product_on_sell
		from web_products
	</select>
	
<!-- 	
	페이지 번호에 맞는 상품을 조회하기
		- 페이지 번호에 해당하는 시작행, 끝행 번호를 전달받아서 상품 정보를 조회한다.
		
	List<Product> getProducts(@Param("begin")int begin, @Param("end")int end);
		
	<select id="getProducts" resultMap="ProductResultMap">
		select 
			product_no,
			product_name,
			product_maker, 
			product_price, 
			product_discount_price, 
			product_on_sell
		from (
			select
				row_number() over (order by product_no desc) row_number,
				product_no, 
				product_name, 
				product_maker, 
				product_price, 
				product_discount_price, 
				product_on_sell
			from web_products
		)
		where row_number between #{begin} and #{end}
	</select> 
	
	
	페이지 번호, 정렬순서에 맞는 상품정보 조회하기
		- 조회시작행, 끝행, 정렬방식을 Map객체로 전달받아서 조회한다.
		
	List<Product> getProducts(Map<Stirng, Object> param);
	
	<select id="getProducts" resultMap="ProductResultMap">
		select 
			product_no,
			product_name,
			product_maker, 
			product_price, 
			product_discount_price, 
			product_on_sell
		from (
			select
				<choose>
					<when test="sort == 'date'">
						row_number() over (order by product_no desc) row_number,
					</when>
					<when test="sort == 'high'">
						row_number() over (order by product_price desc) row_number,
					</when>
					<when test="sort == 'low'">
						row_number() over (order by product_price asc) row_number,
					</when>
					<otherwise>
						row_number() over (order by product_no desc) row_number,
					</otherwise>
				</choose>
				product_no, 
				product_name, 
				product_maker, 
				product_price, 
				product_discount_price, 
				product_on_sell
			from web_products
		)
		where row_number between #{begin} and #{end}
	</select> 
	
	
	페이지번호, 정렬방식, 검색옵션, 검색키워드에 맞는 상품정보를 조회하기
		-> 조회시작행, 끝행, 정렬방식, 검색옵션("상품명", "제조사", "가격"), 해당 옵션의 값
		
	List<Product> getProducts(Map<Stirng, Object> param);
	
	<select id="getProducts" resultMap="ProductResultMap">
		select 
			product_no,
			product_name,
			product_maker, 
			product_price, 
			product_discount_price, 
			product_on_sell
		from (
			select
				<choose>
					<when test="sort == 'date'">
						row_number() over (order by product_no desc) row_number,
					</when>
					<when test="sort == 'high'">
						row_number() over (order by product_price desc) row_number,
					</when>
					<when test="sort == 'low'">
						row_number() over (order by product_price asc) row_number,
					</when>
					<otherwise>
						row_number() over (order by product_no desc) row_number,
					</otherwise>
				</choose>
				product_no, 
				product_name, 
				product_maker, 
				product_price, 
				product_discount_price, 
				product_on_sell
			from web_products
		)
		<where>
			<choose>
				<when test="opt == '상품명'">
					product_name like '%' || #{keyword} || '%'
				</when>
				<when test="opt == '제조사'">
					product_maker = #{keyword}
				</when>
				<when test="opt == '가격'">
					product_price &lt= #{keyword} 
				</when>
			</choose>
		</where>
	</select> 
-->
	
	<select id="getProductByProductNo" parameterType="int" resultMap="ProductResultMap">
		select *
		from web_products p, web_categories c
		where product_no = #{value}
		and p.cat_no = c.cat_no
	</select>
	
	<update id="deleteProductByProductNo" parameterType="int">
		delete from web_products
		where product_no = #{value}
	</update>
	
	<update id="updateProduct" parameterType="Product">
		update web_products
		<set>
		<!-- 파라미터 타입이 map이라면 
			 <if test="name != null>
			 product_name = #{name},
			 </if>
			 라고 적는다. -->
			product_name = #{name},
			product_maker = #{maker},
			product_description = #{description},
			product_price = #{price},
			product_discount_price = #{discountPrice},
			product_on_sell = #{onSell},
			product_stock = #{stock},
			cat_no = #{catNo},
			product_update_date = sysdate
		</set>
		where product_no = #{no}
	</update>
	
	<select id="searchProducts" parameterType="map" resultMap="ProductResultMap">
		select product_no, product_name, product_maker, product_price, product_discount_price, product_on_sell
		from web_products
		<where>
			<if test="name != null"> <!-- 여기서 name은 Product객체의 필드 -->
			<!-- 이름에 들어가기만 하면 됨 
				 완전 같아야 한다면 product_name = #{name} 이렇게 작성한다. 
				 #{키}를 적으면 value가 자동 삽입된다. -->
				product_name like '%' || #{name} || '%'
			</if>
			<if test="maker != null">
				and product_maker = #{maker}
			</if>
			<if test="min != null ">
				and product_price >= #{min}
			</if>
			<if test="max != null">
				and product_price &lt;= #{max}
			</if>
			<if test="catNo != null">
				and cat_no = #{catNo}
			</if>
		</where>
	</select>
	
</mapper>